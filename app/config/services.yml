services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    AppBundle\Command\:
        resource: '../../src/AppBundle/Command'
        public: true
        tags: ['console.command']

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Command,Entity,Exception,Repository,Request}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # For silencing deprecation notices
    ResqueBundle\Resque\Command\:
        resource: '../../vendor/resquebundle/resque/Command'
        tags: [console.command]

    Cron\CronBundle\Command\:
        resource: '../../vendor/cron/cron-bundle/Command'
        tags: [console.command]

    FOS\UserBundle\Util\TokenGeneratorInterface:
      alias: fos_user.util.token_generator

    FOS\UserBundle\Util\CanonicalizerInterface:
      alias: fos_user.util.canonicalizer.default

    FOS\UserBundle\Util\UserManipulator:
      alias: fos_user.util.user_manipulator

    Cron\CronBundle\Cron\Manager:
      alias: cron.manager


    AppBundle\Command\Job\PrepareCommand:
      arguments:
        $predefinedDomainsToIgnore:
          css-validation: '%css_validation_domains_to_ignore%'
          js-static-analysis: '%js_static_analysis_domains_to_ignore%'

    AppBundle\Command\Job\ResolveWebsiteCommand:
      arguments:
        $predefinedDomainsToIgnore:
          css-validation: '%css_validation_domains_to_ignore%'
          js-static-analysis: '%js_static_analysis_domains_to_ignore%'

    AppBundle\Command\Stripe\Event\UpdateDataCommand:
      arguments:
        $stripeKey: '%stripe_key%'

    AppBundle\EventListener\Stripe\CustomerSubscriptionDeletedListener:
      arguments:
        $webClientProperties: '%web_client%'
      tags:
        - { name: kernel.event_listener, event: stripe_process.customer.subscription.deleted, method: onCustomerSubscriptionDeleted }

    AppBundle\EventListener\Stripe\CustomerSubscriptionCreatedListener:
      arguments:
        $webClientProperties: '%web_client%'
      tags:
        - { name: kernel.event_listener, event: stripe_process.customer.subscription.created, method: onCustomerSubscriptionCreated }

    AppBundle\EventListener\Stripe\CustomerSubscriptionTrialWillEndListener:
      arguments:
        $webClientProperties: '%web_client%'
      tags:
        - { name: kernel.event_listener, event: stripe_process.customer.subscription.trial_will_end, method: onCustomerSubscriptionTrialWillEnd }

    AppBundle\EventListener\Stripe\CustomerSubscriptionUpdatedListener:
      arguments:
        $webClientProperties: '%web_client%'
      tags:
        - { name: kernel.event_listener, event: stripe_process.customer.subscription.updated, method: onCustomerSubscriptionUpdated }

    AppBundle\EventListener\Stripe\InvoicePaymentSucceededListener:
      arguments:
        $webClientProperties: '%web_client%'
      tags:
        - { name: kernel.event_listener, event: stripe_process.invoice.payment_succeeded, method: onInvoicePaymentSucceeded }

    AppBundle\EventListener\Stripe\InvoicePaymentFailedListener:
      arguments:
        $webClientProperties: '%web_client%'
      tags:
        - { name: kernel.event_listener, event: stripe_process.invoice.payment_failed, method: onInvoicePaymentFailed }

    AppBundle\Services\HttpClientService:
      arguments:
        - '%curl_options%'

    GuzzleHttp\Client:
      factory: 'AppBundle\Services\HttpClientService:getHttpClient'

    AppBundle\Services\WebResourceRetrieverFactory:
      arguments:
          - '@GuzzleHttp\Client'

    webignition\WebResource\Retriever:
      factory: 'AppBundle\Services\WebResourceRetrieverFactory:create'

    simplytestable.session.handler:
      class: Symfony\Component\HttpFoundation\Session\Storage\Handler\NullSessionHandler

    webignition\Url\Resolver\Resolver:
      arguments:
        - '@GuzzleHttp\Client'

    webignition\WebResource\Sitemap\Factory:

    AppBundle\Services\TaskPreProcessor\Factory:
      arguments:
        $taskPreprocessors:
          - '@AppBundle\Services\TaskPreProcessor\LinkIntegrityTaskPreProcessor'

    AppBundle\Services\UserAccountPlanService:
      arguments:
        $defaultTrialPeriod: '%default_trial_period%'

    AppBundle\Services\StripeService:
      arguments:
        $apiKey: '%stripe_key%'

    AppBundle\Services\TaskOutputJoiner\Factory:
      arguments:
        $taskPreprocessors:
          - '@AppBundle\Services\TaskOutputJoiner\LinkIntegrityTaskOutputJoiner'

    AppBundle\Services\TaskPostProcessor\Factory:
      arguments:
        $taskPreprocessors:
          - '@AppBundle\Services\TaskPostProcessor\UrlDiscoveryTaskPostProcessor'

    AppBundle\Services\TaskTypeDomainsToIgnoreService:
      arguments:
        $domainsToIgnoreByTaskType:
          "css validation": '%css_validation_domains_to_ignore%'
          "js static analysis": '%js_static_analysis_domains_to_ignore%'

    AppBundle\Services\StripeWebHookMailNotificationSender:
      arguments:
        $parameters: '%stripe_webhook_developer_notification%'

    # Needs to be explicitly defined to be used in a resque context
    # Is otherwise autowired and autoconfigured correctly when injected from the main DIC
    AppBundle\Services\Job\WebsiteResolutionService:
      arguments:
        $jobService: '@AppBundle\Services\JobService'
        $httpClientService: '@AppBundle\Services\HttpClientService'
        $websiteService: '@AppBundle\Services\WebSiteService'
        $urlResolver: '@webignition\Url\Resolver\Resolver'
        $stateService: '@AppBundle\Services\StateService'
        $entityManager: '@doctrine.orm.entity_manager'

    webignition\WebsiteSitemapFinder\WebsiteSitemapFinder:
      arguments:
        - '@GuzzleHttp\Client'

    webignition\WebsiteRssFeedFinder\WebsiteRssFeedFinder:
      arguments:
        - '@GuzzleHttp\Client'

    Postmark\PostmarkClient:
      arguments:
        - '%postmark_api_key%'

    AppBundle\DataFixtures\ORM\LoadUserData:
      arguments:
        $adminUserEmail: '%admin_user_email%'
        $adminUserPassword: '%admin_user_password%'

    AppBundle\DataFixtures\ORM\NormaliseUserAccountPlans:
      arguments:
        $defaultTrialPeriod: '%default_trial_period%'

    AppBundle\Services\ApplicationStateService:
      arguments:
        $kernelRootDirectory: '%kernel.root_dir%'
        $environment: '%kernel.environment%'
